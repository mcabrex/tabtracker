===========================CLIENT===========================

this is vue setup stuff you can just check the repo for more information
1. npm install -g vue-cli
    you can use it to build up template projects using vue
2. vue init webpack __insert_name_here__
    in this case were just gonna call it client
    itll take you step by step dont even fret bud
3. go into the client folder and npm i
    standard install stuff, install these dependencies locally in a node_modules folder
4. npm run dev
    thisll start up the vue.js frontend server set up at local8080 by default
    whenever you wanna come back to your code just hit up npm run dev again, should be all good in the hood even
5. commit your stuff to git, commit small and commit often ya silly
6. go out of the client folder and mkdir server 
    make a server folder seperate from the client folder so the client and the server dont overlap
    makes it a little easier to manage and control 

===========================SERVER===========================

1. npm init -f
    run this command in your new server folder
    first we initialize a new server project, we use this command to create a package.json and put it in our server folder
2. npm i --save-dev nodemon eslint
    nodemon useful for continuously restarting your server
3. go to your package.json and add a start script as well as a lint script
        "start" : "./node_modules/nodemon/bin/nodemon.js src/app.js --exec 'npm run lint && node'"
        "lint" : "./node_modules/.bin/eslint **/*.js"
    what this is gonna do is run nodemon over some file (src/app.js) which we'll make eventually and run a linter over the code as well as run the server (npm run lint && node)
4. ./node_modules/eslint/bin/eslint.js --init
    this is gonna initialize eslint for us
        >use a popular style guide
        >standard
        >Javascript
5. make a new folder in server and call it src and inside of that make a new file called app.js
    server => src => app.js
    inside that app.js we're going to define a web application
6. npm install --save express body-parser cors morgan
    then go ahead an require all of that
7. set up the express server 
    const app = express()
8. app.use all those dependencies
    besides express obvi

===========================REGISTER===========================

1. npm install --save axios
    a library for doing http requests to a backend
2. in your client folder create a folder called services and make a file called Api.js
    client => services => Api.js
    sets up a type of connector to hit the backend
3. create another file in services caled AuthenticationService.js
    hits register endpoint

===========================Sequelize===========================

1. npm install --save sequelize sqlite3
2. in the app.js in src in servers require you models (probably haven't created it at this point but just require what we'll eventually make anyway) and set it as:
    const {sequelize} = require('./models')
3. then do sequelize.sync at the end
    this will connect sequelize to whatever database you have configured it for, and create the tables if they dont exist
4. follow it up (with a promise) to start up the server afterwards, should look something like this :
    sequelize.sync()
    .then(() => {
        app.listen(process.env.PORT || 8081)
    })
---------------------------REFRACTOR---------------------------
5. tighten up the port by creating a config file in a config folder inside the same folder your app.js is in the server
    server => config => config
6. inside that config file export port: 8081
7. now back in your app.js create a config const thats just requiring './config/config' and set config.port as your server in your app.listen and any server starting message if you want
8. make a seperate file inside your server src folder and name it routes.js, this is where we're going to move all our routes to keep it seperate from the app.js
9. inside your routes.js file export a function that will handle the ports
    should look something like this : 
    module.exports = (app) => {
        app.post('/register', (req, res) => {
            res.send({
            message: `Your user ${req.body.email} was registered!`
            })
        })
    }
10. then all you have to do is get rid of any routes in your app.js and instead require your new routes file into app.js and pass it the express app: 
    require('./routes')(app)
----------------------------------------------------------------

===========================User MODEL Sequelize===========================
1. inside the server src create a new folder called models, obviously this will hold all your models
2. for now create a User model file
3. create an index.js file inside your models folder
4. inside the index.js declare a db object and export it
5. back at the beginning get your boilerplate sequelize requires out of the way: 
    const fs = require('fs')
    // how node reads through file systems
    const path = require('path')
    // deals with paths
    const Sequelize = require('sequelize')
    const config = require('../config/config')
6.

===========================Controllers===========================
1. create a folder called controllers in your src folder inside your server folder
    this is basically where you're gonna have all your endpoints defined
2. inside that folder create a file called AuthenticationController.js
    inside that file export any routes that should be associated with authentcation 
3. copy the register route and export it from that authenticationcontroller file you just created
4. then in your routes require that AuthenticationController and store it as a const and simply change the route to AuthenticationController.register(within the app.post)
5. this is a way to keep things seperate so you're controller is used to control your endpoints and your routes are used to point to those endpoints

===========================Controllers2===========================

1. create a const {User} inside your AuthenticationController file and have it require the models folder so we can use those models
2. change your register endpoint into an async that will try to await a User.create(req.body)
    if successful res.send(user.toJSON())
    otherwise catch the error and send a status400 with an error message 'This email account is already boogaloo' or w/e you want really
3. now anybody that registers should be saved in your sqlite db

===========================Validation1===========================
1. npm install  --save joi
    joi is a framework for validating requests
2. set up a folder called policies inside src inside server folder
3. create an AuthenticationControllerPolicy.js file inside that
4. inside AuthenticationControllerPolicy we're going to create express middleware that's going to validate data constraints as pass or fail
5. require join into that file and export a register method similar to the one we just made in AuthenticationController
6. inside your routes import the AuthenticationControllerPolicy file add it as an argument between the path and the AuthenticationController 
7. so how it works in express:
    hit the end point,
    hit the policy middleware, which will call next
    which will then go to the AuthenticationController.register which will hit the controller
8. now we can use the built in Joi methods to create some validation for our AuthenticationControllerPolicy to pass onto the AuthenticationController
===========================Veutify===========================

1. npm install --save vuetify
    a framework for vue that let's you easily manage css
2. inside your client import vuetify and import veutify/dist/veutify.min.css
3. then simply use vuetify with Vue.use(Veutify);
    after your vue config

===========================jsonwebtoken===========================

1. npm install --save jsonwebtoken
    inside your server folder
    gonna use this to authenticate logins
2. require it into your AuthenticationController, as well as the config file we made earlier
3. create a function at the top of your AuthenticationController called jwtSignuser(user){

}
    this will assign a user object using the jwt library in order to get back a jwt token
4. in that function make a ONE_WEEK const which is just 60 seconds times 60 minutes times 24 hours times 7 days
5. then return jwt.sign(user,configt.authentication.jwtSecret, {
    expiresIn: ONE_WEEK
})
6. now define an authentication key in config and give it a key value pair of {
    jwtSecret: process.env.JWT_SECRET || 'secret
}
    this is gonna be used to assign the jwt token using a secret string to determine if the token is valid or not
===========================Password Hash===========================
1. npm i --save bcrypt-nodejs
    gonna use this to encrypt salt hash passwords
2. npm i --save bluebird
    use this for your promise library
3. require both of these into your User.js model
    const Promise = require('bluebird')
    const bcrypt = Promise.promisifyAll(require('bcrypt-nodejs'))
4. in add User model create this prototype: 
  User.prototype.comparePassword = function (password) {
    return bcrypt.compareAsync(password, this.password)
    // assuming the password is being stored using bcrypt well just compare the password entered with the password in the db
  }
5. now in the AuthenticationController we can change the password validation const into 
      const isPasswordValid = await user.comparePassword(password)
6. add hooks to the User model
    beforeCreate,beforeUpdate,beforeSave 
    and have these values be a newly created hashPassword function
    function hashPassword (user, options) {
    const SALT_FACTOR = 8

    if (!user.changed('password')) {
        return
    }
    return bcrypt
        .genSaltAsync(SALT_FACTOR)
        .then(salt => bcrypt.hashAsync(user.password, salt, null))
        .then(hash => {
        user.setDataValue('password', hash)
        })
    }

===========================Vuex===========================

1. npm install --save vuex
   npm install --save vuex-router-sync
    into your client folder
2. in your main.js in your client import:
    import 'vuetify/dist/vuetify.min.css';
    import { sync } from 'vuex-router-sync';
3. add sync(store,router) after your vuetify
    add store to your Vue object 
4. in the client src create a store folder with a store.js inside
5. inside the store.js import Vue or Vuex
6. have Vue use Vuex and create a new store
7. Vuex has actions mutations and state
    you should always invoke your actions from you vue components
8. vuex is like the redux of vue, in order for the state to change a mutation has to have been invoked and in order for a mutation to happen an action has to have been invoked
9. in the Login component
    using the response which will have the username and the token
    call the store's set token method with a dispatch
        this.$store.dispatch('setToken', response.data.token)
10. you can do the same for register
11. get the vue dev tools chrome extension
    it will help you keep track of the events that fire off and will help you keep track of the application

===========================Smart Components===========================

1. so check out our component Panel which well be using across other components as like a template
2. all it has is the template we desire and props we want to be able to smartly change based off the component
3. in order to use this (check out something like CreateSong to see it being used in action) simply import the panel in the scripts
4. add a components field to the export script and pass it panel
    components: {
        Panel
    }
5. then in the template in the component you wanna use Panel just use it like an html tag
    <panel title="whatever title you want" ></panel>
6. remember the title can change because we added it as a prop
7. also in our Panel component if we want to add anything between our Panel tag we need to specify a <slot></slot> for it inside our Panel component (check it out)
8. that way anything we add between <panel>stuff cand be added here</panel> will go into that slot

===========================Event Handling===========================
1. on input fields where you use v-model, what you pass into that will be coming from your data
    so in CreateSong component you have something like  
                <v-text-field
                    label="Lyrics"
                    multi-line
                    v-model="song.lyrics"
                ></v-text-field>
    and so when you type into the textfield it will update the data song.lyrics because of it being an object and all looking something like: 
                data() {
                    return {
                        song: {
                            lyric: null
                        }
                    }
                },

===========================Routing===========================
if you want to route to a static page url just put this in the method that youll hit when you click something (see CreateSong)
                this.$router.push({
                    name: 'songs'
                })
                